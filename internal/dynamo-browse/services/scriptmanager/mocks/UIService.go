// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// UIService is an autogenerated mock type for the UIService type
type UIService struct {
	mock.Mock
}

type UIService_Expecter struct {
	mock *mock.Mock
}

func (_m *UIService) EXPECT() *UIService_Expecter {
	return &UIService_Expecter{mock: &_m.Mock}
}

// PrintMessage provides a mock function with given fields: msg
func (_m *UIService) PrintMessage(msg string) {
	_m.Called(msg)
}

// UIService_PrintMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrintMessage'
type UIService_PrintMessage_Call struct {
	*mock.Call
}

// PrintMessage is a helper method to define mock.On call
//  - msg string
func (_e *UIService_Expecter) PrintMessage(msg interface{}) *UIService_PrintMessage_Call {
	return &UIService_PrintMessage_Call{Call: _e.mock.On("PrintMessage", msg)}
}

func (_c *UIService_PrintMessage_Call) Run(run func(msg string)) *UIService_PrintMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UIService_PrintMessage_Call) Return() *UIService_PrintMessage_Call {
	_c.Call.Return()
	return _c
}

type mockConstructorTestingTNewUIService interface {
	mock.TestingT
	Cleanup(func())
}

// NewUIService creates a new instance of UIService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUIService(t mockConstructorTestingTNewUIService) *UIService {
	mock := &UIService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
